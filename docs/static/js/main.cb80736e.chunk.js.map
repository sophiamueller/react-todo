{"version":3,"sources":["Todolist.js","Input.js","Counter.js","Heading.js","App.js","serviceWorker.js","index.js"],"names":["Todolist","_this$props","this","props","text","onClick","isDone","onDelete","react_default","a","createElement","className","Component","Input","_this","type","placeholder","onKeyUp","event","keyupfunction","Counter","count","Heading","_Component","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","App","state","todos","done","addTodoArray","newEntry","target","concat","toConsumableArray","setState","toggleDone","index","newTodos","slice","objectSpread","deleteTodo","_this2","countTodos","filter","length","src_Heading_0","src_Counter","src_Input","map","todo","src_Todolist","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.cb80736e.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nclass Todolist extends Component {\n  render() {\n    const { text, onClick, isDone, onDelete } = this.props\n\n    return (\n      <li>\n        <span onClick={onClick} className={isDone ? 'done' : ''}>\n          {text}\n        </span>\n        <button onClick={onDelete}>&times;</button>\n      </li>\n    )\n  }\n}\n\nexport default Todolist\n","import React, { Component } from 'react'\n\nclass Input extends Component {\n  render() {\n    return (\n      <input\n        type=\"text\"\n        placeholder=\"Whishlist\"\n        onKeyUp={event => {\n          this.props.keyupfunction(event)\n        }}\n      />\n    )\n  }\n}\n\nexport default Input\n","import React, { Component } from 'react'\n\nclass Counter extends Component {\n  render() {\n    return <p className=\"Counter\">Done: {this.props.count}</p>\n  }\n}\n\nexport default Counter\n","import React, { Component } from 'react'\nimport './Heading.css'\n\nexport class Heading extends Component {\n  render() {\n    return <p className=\"Heading\">To-do: Weihnachtsw√ºnsche </p>\n  }\n}\n\nexport default Heading\n","import React, { Component } from 'react'\nimport Todolist from './Todolist'\nimport Input from './Input'\nimport Counter from './Counter'\nimport Heading from './Heading'\nimport './App.css'\nimport './Counter.css'\nimport './Heading.css'\n\nclass App extends Component {\n  state = {\n    todos: [\n      { text: 'Geschenk1', done: false },\n      { text: 'Geschenk2', done: false },\n      { text: 'Geschenk3', done: false }\n    ]\n  }\n\n  addTodoArray = event => {\n    if (event.key === 'Enter') {\n      const newEntry = [\n        { text: event.target.value, done: false },\n        ...this.state.todos\n      ]\n      this.setState({\n        todos: newEntry\n      })\n      event.target.value = ''\n    }\n  }\n\n  toggleDone = index => {\n    const { todos } = this.state\n\n    const newTodos = [\n      ...todos.slice(0, index),\n      { ...todos[index], done: !todos[index].done },\n      ...todos.slice(index + 1)\n    ]\n\n    this.setState({\n      todos: newTodos\n    })\n  }\n\n  deleteTodo = index => {\n    const { todos } = this.state\n    const newTodos = [...todos.slice(0, index), ...todos.slice(index + 1)]\n\n    this.setState({\n      todos: newTodos\n    })\n  }\n\n  render() {\n    const countTodos = this.state.todos.filter(todos => todos.isDone).length\n    return (\n      <div className=\"App\">\n        <header />\n        <Heading />\n        <Counter count={countTodos} />\n        <Input keyupfunction={this.addTodoArray} />\n        <ul>\n          {this.state.todos.map((todo, index) => (\n            <Todolist\n              key={index}\n              isDone={todo.done}\n              text={todo.text}\n              onClick={() => this.toggleDone(index)}\n              onDelete={() => this.deleteTodo(index)}\n            />\n          ))}\n        </ul>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}